#!/usr/bin/env python3
"""
Modular CRC Test for ANT-BMS Communication 
-----------------------------------------
Tests different CRC calculation methods for ANT-BMS UART protocol.
Supports CRC16-Modbus, CRC16-XMODEM, CRC16-CCITT, CRC16-DNP, and CRC16-Kermit.

This test validates both TX (requests) and RX (responses) frames using the ANT-BMS protocol.
Frame structure: 7E A1 [Func] [Addr] [LenH] [LenL] [Payload...] [CRC_H] [CRC_L] AA 55

"""

# Path: /Users/mervesaglam/Desktop/Masterarbeit/src/antbms_crc_check.py
# conda activate env flask_app
# python antbms_crc_check.py

import binascii
from prettytable import PrettyTable
from typing import List, Dict, Tuple, Callable


# Define different CRC calculation methods
def crc16_modbus(data_bytes: bytes) -> int:
    """
    Calculate CRC16-Modbus checksum
    Polynomial: 0xA001 (reversed 0x8005), init: 0xFFFF
    """
    crc = 0xFFFF
    for byte_val in data_bytes:
        crc ^= byte_val
        for _ in range(8):
            if crc & 0x0001:
                crc = (crc >> 1) ^ 0xA001
            else:
                crc >>= 1
    return crc


def crc16_xmodem(data_bytes: bytes) -> int:
    """
    Calculate CRC16-XMODEM checksum
    Polynomial: 0x1021, init: 0x0000
    """
    crc = 0x0000
    for byte_val in data_bytes:
        crc ^= (byte_val << 8)
        for _ in range(8):
            if crc & 0x8000:
                crc = ((crc << 1) & 0xFFFF) ^ 0x1021
            else:
                crc = (crc << 1) & 0xFFFF
    return crc


def crc16_ccitt(data_bytes: bytes) -> int:
    """
    Calculate CRC16-CCITT (KERMIT) checksum
    Polynomial: 0x1021, init: 0x0000, reflect input/output
    """
    crc = 0x0000
    for byte_val in data_bytes:
        # Reflect input byte
        reflected_byte = 0
        temp = byte_val
        for i in range(8):
            reflected_byte = (reflected_byte << 1) | (temp & 1)
            temp >>= 1
        
        crc ^= reflected_byte
        for _ in range(8):
            if crc & 0x0001:
                crc = (crc >> 1) ^ 0x8408  # Reflected 0x1021
            else:
                crc >>= 1
    
    # Reflect output
    reflected_crc = 0
    temp = crc
    for i in range(16):
        reflected_crc = (reflected_crc << 1) | (temp & 1)
        temp >>= 1
    
    return reflected_crc


def crc16_dnp(data_bytes: bytes) -> int:
    """
    Calculate CRC16-DNP checksum
    Polynomial: 0xA6BC (reversed 0x3D65), init: 0x0000, reflect input/output, XOR out: 0xFFFF
    """
    crc = 0x0000
    for byte_val in data_bytes:
        crc ^= byte_val
        for _ in range(8):
            if crc & 0x0001:
                crc = (crc >> 1) ^ 0xA6BC
            else:
                crc >>= 1
    
    return crc ^ 0xFFFF  # Final XOR with 0xFFFF


def crc16_kermit(data_bytes: bytes) -> int:
    """
    Calculate CRC16-KERMIT checksum
    Polynomial: 0x1021, init: 0x0000, reflect input/output
    """
    return crc16_ccitt(data_bytes)  # Kermit is the same as CCITT in this implementation


def jake_checksum(data_bytes: bytes) -> int:
    """
    Calculate 'Jake' checksum
    Simply sums all bytes and subtracts from 0x10000 (65536)
    """
    crc = 0x10000
    for byte_val in data_bytes:
        crc = crc - byte_val
    return crc


class TestCase:
    def __init__(self, name: str, frame_bytes: bytes, data_for_crc: bytes, expected_crc: int):
        self.name = name
        self.frame_bytes = frame_bytes
        self.data_for_crc = data_for_crc
        self.expected_crc = expected_crc
    
    def __str__(self) -> str:
        return f"{self.name}: expected CRC={self.expected_crc:04X}"


def run_tests(test_cases: List[TestCase], crc_methods: Dict[str, Callable[[bytes], int]]) -> List[Dict]:
    """Run all tests with all CRC methods"""
    results = []
    
    for test in test_cases:
        test_result = {"Test Case": test.name}
        test_result["Expected CRC"] = f"{test.expected_crc:04X}"
        
        for method_name, crc_func in crc_methods.items():
            calculated_crc = crc_func(test.data_for_crc)
            
            # For debugging: show both standard and byte-swapped CRC values
            calculated_crc_be = calculated_crc
            calculated_crc_le = ((calculated_crc & 0xFF) << 8) | ((calculated_crc >> 8) & 0xFF)
            
            matches = calculated_crc_be == test.expected_crc
            matches_swapped = calculated_crc_le == test.expected_crc
            
            status = " ✓" if matches else (" ⚠" if matches_swapped else " ✗")
            test_result[method_name] = f"{calculated_crc_be:04X}" + status
        
        results.append(test_result)
    
    return results


def display_results_table(results: List[Dict]) -> None:
    """Display results in a pretty table"""
    if not results:
        print("No results to display")
        return
    
    table = PrettyTable()
    # Get all fields from the first result
    table.field_names = list(results[0].keys())
    
    for result in results:
        table.add_row(list(result.values()))
    
    print(table)


def create_test_cases_big_endian() -> List[TestCase]:
    """
    Create test cases from the provided data, using BIG-ENDIAN format for CRC values
    
    Note: In BIG-ENDIAN, the CRC value is stored as [CRC_HIGH, CRC_LOW] in the frame.
    In the frame bytes, order changes from [CRC_L, CRC_H] to [CRC_H, CRC_L] when switching 
    from little-endian to big-endian.
    """
    test_cases = []

    # Test 1: TX from State
    # Original: 7E A1 01 00 00 BE 18 55 AA 55 (little-endian CRC)
    # Note: Expected CRC changes from 0xB699 to 0x99B6
    frame_tx_state = bytes([0x7E, 0xA1, 0x01, 0x00, 0x00, 0xBE, 0x18, 0x55, 0xAA, 0x55])
    data_tx_state= bytes([0xA1, 0x01, 0x00, 0x00, 0xBE])
    expected_crc_tx_state = 0x5518 
    test_cases.append(TestCase("TX state", frame_tx_state, data_tx_state, expected_crc_tx_state))
    
    # Test 1.1: RX from State
    # Original: 7E A1 11 00 00 88 ... 69 EO AA 55 (little-endian CRC)
    # Note: Expected CRC 0xE069
    frame_rx_state = bytes([0x7E, 0xA1, 0x11, 0x00, 0x00, 0x88, 0x05, 0x03, 0x04, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                0x80, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0x0E, 0x36, 0x0E, 0x38, 0x0E, 0x2F, 0x0E, 
                                0x32, 0x0E, 0x31, 0x0E, 0x32, 0x0E, 0x3B, 0x0E, 0x38, 0x0E, 0x30, 0x0E, 0x34, 0x0E, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00,
                                0x18, 0x00, 0x17, 0x00, 0xA0, 0x0F, 0x00, 0x00, 0x2A, 0x00, 0x64, 0x00, 0x01, 0x01, 0x00, 0x00, 0x80, 0xF0, 0xFA, 0x02, 0x07, 0x55, 
                                0x48, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x0E, 0x08, 0x00,
                                0x2F, 0x0E, 0x04, 0x00, 0x0C, 0x00, 0x34, 0x0E, 0x00, 0x00, 0x71, 0x00, 0x6C, 0x00, 0xAB, 0x02, 0xF1, 0xFA, 0x04, 0x00, 0x00, 0x00, 
                                0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0xE0, 0xAA, 0x55])
    data_rx_state= bytes([ 0xA1, 0x11, 0x00, 0x00, 0x88, 0x05, 0x03, 0x04, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                0x80, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0x0E, 0x36, 0x0E, 0x38, 0x0E, 0x2F, 0x0E, 
                                0x32, 0x0E, 0x31, 0x0E, 0x32, 0x0E, 0x3B, 0x0E, 0x38, 0x0E, 0x30, 0x0E, 0x34, 0x0E, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00,
                                0x18, 0x00, 0x17, 0x00, 0xA0, 0x0F, 0x00, 0x00, 0x2A, 0x00, 0x64, 0x00, 0x01, 0x01, 0x00, 0x00, 0x80, 0xF0, 0xFA, 0x02, 0x07, 0x55, 
                                0x48, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x0E, 0x08, 0x00,
                                0x2F, 0x0E, 0x04, 0x00, 0x0C, 0x00, 0x34, 0x0E, 0x00, 0x00, 0x71, 0x00, 0x6C, 0x00, 0xAB, 0x02, 0xF1, 0xFA, 0x04, 0x00, 0x00, 0x00, 
                                0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    expected_crc_rx_state = 0xE069  
    test_cases.append(TestCase("RX state", frame_rx_state, data_rx_state, expected_crc_rx_state))


    # Test 2: TX from ParameterConfig_Volt
    # Original: 7E A1 02 34 00 34 99 B6 AA 55 (little-endian CRC)
    # Note: Expected CRC 0xB699
    frame_tx_volt = bytes([0x7E, 0xA1, 0x02, 0x00, 0x00, 0x34, 0x99, 0xB6, 0xAA, 0x55])
    data_tx_volt = bytes([0xA1, 0x02, 0x00, 0x00, 0x34])
    expected_crc_tx_volt = 0xB699 
    test_cases.append(TestCase("TX Volt", frame_tx_volt, data_tx_volt, expected_crc_tx_volt))

    # Test 2.1: RX from ParameterConfig_Volt
    # Original: 7E	A1	12	00	00	34	68	10	04	10	CC	10	68	10	08	04  F0	03	54	0B	80	0C	28	0A	54	0B	0A	00	0A	00	E8	03
    #               20	03	00	00	00	00	9A	10	68	10	F0	03	E4	03	80	0C  E4	0C	0A	00	0A	00	20	03	BC	02	41	BD	FF	0B	00
    #           	00  41	F2	AA	55 (little-endian CRC)
    # Note: Expected CRC 0xBD41
    frame_rx_volt = bytes([0x7E, 0xA1, 0x12, 0x00, 0x00, 0x34, 0x68, 0x10, 0x04, 0x10, 0xCC, 0x10, 0x68, 0x10, 0x08, 0x04, 0xF0, 0x03, 0x54, 0x0B, 0x80, 0x0C, 0x28,
                           0x0A, 0x54, 0x0B, 0x0A, 0x00, 0x0A, 0x00, 0xE8, 0x03, 0x20, 0x03, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x10, 0x68, 0x10, 0xF0, 0x03, 0xE4, 0x03, 
                           0x80, 0x0C, 0xE4, 0x0C, 0x0A, 0x00, 0x0A, 0x00, 0x20, 0x03, 0xBC, 0x02, 0x41, 0xBD, 0xFF, 0x0B, 0x00, 0x00, 0x41, 0xF2, 0xAA, 0x55])
    data_rx_volt = bytes([0xA1, 0x12, 0x00, 0x00, 0x34, 0x68, 0x10, 0x04, 0x10, 0xCC, 0x10, 0x68, 0x10, 0x08, 0x04, 0xF0, 0x03, 0x54, 0x0B, 0x80, 0x0C, 0x28, 0x0A, 
                          0x54, 0x0B, 0x0A, 0x00, 0x0A, 0x00, 0xE8, 0x03, 0x20, 0x03, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x10, 0x68, 0x10, 0xF0, 0x03, 0xE4, 0x03, 0x80, 
                          0x0C, 0xE4, 0x0C, 0x0A, 0x00, 0x0A, 0x00, 0x20, 0x03, 0xBC, 0x02])
    expected_crc_rx_volt = 0xBD41 
    test_cases.append(TestCase("RX Volt", frame_rx_volt, data_rx_volt, expected_crc_rx_volt))

    # Test 3: TX from ParameterConfig_Temp
    # Original: 7E A1 02 38 00 2C 18 71 AA 55 (little-endian CRC)
    # Note: Expected CRC 0x7118
    frame_tx_temp = bytes([0x7E, 0xA1, 0x02, 0x38, 0x00, 0x2C, 0x18, 0x71, 0xAA, 0x55])
    data_tx_temp = bytes([0xA1, 0x02, 0x38, 0x00, 0x2C])
    expected_crc_tx_temp = 0x7118  
    test_cases.append(TestCase("TX Temp", frame_tx_temp, data_tx_temp, expected_crc_tx_temp))
    
    # Test 3.1: RX from ParameterConfig_Temp
    # Original: 7E	A1	12	38	00	2C	3C	00	37	00	3C	00	37	00	4B	00 41	00	FE	FF	02	00	F6	FF	FB	FF	FF	FF	FF	FF	37	00 35	00	37
    #       	00	35	00	46	00	43	00	00	00	02	00	FB	FF  FD	FF	2A	DD	FF	0B	00	00	41	F2	AA	55 (little-endian CRC)
    # Note: Expected CRC 0xDD2D
    frame_rx_temp = bytes([0x7E, 0xA1, 0x12, 0x38, 0x00, 0x2C, 0x3C, 0x00, 0x37, 0x00, 0x3C, 0x00, 0x37, 0x00, 0x4B, 0x00, 0x41, 0x00, 0xFE, 0xFF, 0x02, 0x00, 0xF6,
                            0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x37, 0x00, 0x35, 0x00, 0x37, 0x00, 0x35, 0x00, 0x46, 0x00, 0x43, 0x00, 0x00, 0x00, 0x02, 0x00,
                            0xFB, 0xFF, 0xFD, 0xFF, 0x2A, 0xDD, 0xFF, 0x0B, 0x00, 0x00, 0x41, 0xF2, 0xAA, 0x55])
    data_rx_temp = bytes([0xA1, 0x12, 0x38, 0x00, 0x2C, 0x3C, 0x00, 0x37, 0x00, 0x3C, 0x00, 0x37, 0x00, 0x4B, 0x00, 0x41, 0x00, 0xFE, 0xFF, 0x02, 0x00, 0xF6,
                            0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x37, 0x00, 0x35, 0x00, 0x37, 0x00, 0x35, 0x00, 0x46, 0x00, 0x43, 0x00, 0x00, 0x00, 0x02, 0x00,
                            0xFB, 0xFF, 0xFD, 0xFF])
    expected_crc_rx_temp = 0xDD2A  
    test_cases.append(TestCase("RX Temp", frame_rx_temp, data_rx_temp, expected_crc_rx_temp))
        

    # Test 4: TX ParameterConfig_Current
    # Original: 7E A1 02 68 00 20 18 65 AA 55 (little-endian CRC)
    # Note: Expected CRC 0x6518
    frame_tx_current = bytes([0x7E, 0xA1, 0x02, 0x68, 0x00, 0x20, 0x18, 0x65, 0xAA, 0x55])
    data_tx_current = bytes([0xA1, 0x02, 0x68, 0x00, 0x20])
    expected_crc_tx_current = 0x6518  
    test_cases.append(TestCase("TX Current", frame_tx_current, data_tx_current, expected_crc_tx_current))
    

    # Test 4.1: RX from ParameterConfig_Current
    # Original: 7E	A1	12	68	00	20	20	03	05	00	AC	0D	05	00	88	13  E8	03	58	02	20	03	00	00	00	00	BC	02	F4	01	B8	0B 
    #               D0	07	14	00	05	00	46	5D	FF	0B	00	00	41	F2	AA	55 (little-endian CRC)
    # Note: Expected CRC 0x5D46
    frame_rx_current = bytes([0x7E, 0xA1, 0x12, 0x68, 0x00, 0x20, 0x20, 0x03, 0x05, 0x00, 0xAC, 0x0D, 0x05, 0x00, 0x88, 0x13, 0xE8, 0x03, 0x58, 
                                0x02, 0x20, 0x03, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x02, 0xF4, 0x01, 0xB8, 0x0B,0xD0, 0x07, 0x14, 0x00, 0x05, 0x00,
                                0x46, 0x5D, 0xFF, 0x0B, 0x00, 0x00, 0x41, 0xF2, 0xAA, 0x55])
    data_rx_current = bytes([0xA1, 0x12, 0x68, 0x00, 0x20, 0x20, 0x03, 0x05, 0x00, 0xAC, 0x0D, 0x05, 0x00, 0x88, 0x13, 0xE8, 0x03, 0x58, 
                                0x02, 0x20, 0x03, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x02, 0xF4, 0x01, 0xB8, 0x0B, 0xD0, 0x07, 0x14, 0x00, 0x05, 0x00])
    expected_crc_rx_current = 0x5D46  
    test_cases.append(TestCase("RX Current", frame_rx_current, data_rx_current, expected_crc_rx_current))


    # Test 5: TX from ParameterConfig_Balance
    # Original: 7E A1 02 8C 00 0C 59 8F AA 55 (little-endian CRC)
    # Note: Expected CRC 0x8F59
    frame_tx_balance = bytes([0x7E, 0xA1, 0x02, 0x8C, 0x00, 0x0C, 0x59, 0x8F, 0xAA, 0x55])
    data_tx_balance = bytes([0xA1, 0x02, 0x8C, 0x00, 0x0C])
    expected_crc_tx_balance = 0x8F59  
    test_cases.append(TestCase("TX Balance", frame_tx_balance, data_tx_balance, expected_crc_tx_balance))
    
    # Test 5.1: RX from ParameterConfig_Balance
    # Original: 7E	A1	12	8C	00	0C	68	10	04	10	14	00	05	00	B4	00 64 00 FC	D6	FF	0B	00	00	41	F2	AA	55 (little-endian CRC)
    # Note: Expected CRC 0xD6FC
    frame_rx_balance = bytes([0x7E, 0xA1, 0x12, 0x8C, 0x00, 0x0C, 0x68, 0x10, 0x04, 0x10, 0x14, 0x00, 0x05, 0x00, 0xB4, 0x00, 0x64, 0x00, 0xFC, 
                              0xD6, 0xFF, 0x0B, 0x00, 0x00, 0x41, 0xF2, 0xAA, 0x55])
    data_rx_balance = bytes([0xA1, 0x12, 0x8C, 0x00, 0x0C, 0x68, 0x10, 0x04, 0x10, 0x14, 0x00, 0x05, 0x00, 0xB4, 0x00, 0x64, 0x00])
    expected_crc_rx_balance = 0xD6FC  
    test_cases.append(TestCase("RX Balance", frame_rx_balance, data_rx_balance, expected_crc_rx_balance))
    

    # Test 6: TX from Control_ChargeMOS_ON
    # Original: 7E A1 51 06 00 00 69 24 AA 55 (little-endian CRC)
    # Note: Expected CRC changes from 0x6518 to 0x1865
    frame_tx_control_chgmos_on = bytes([0x7E, 0xA1, 0x51, 0x06, 0x00, 0x00, 0x69, 0x24, 0xAA, 0x55])
    data_tx_control_chgmos_on = bytes([0xA1, 0x51, 0x06, 0x00, 0x00])
    expected_crc_tx_control_chgmos_on = 0x2469  
    test_cases.append(TestCase("TX Control_ChgMOS_ON", frame_tx_control_chgmos_on, data_tx_control_chgmos_on, expected_crc_tx_control_chgmos_on))
    
    # Test 6.1: RX from Control_ChargeMOS_ON
    # Original: 7E A1 61 06 00 02 01 00 8B EB AA 55 (little-endian CRC)
    # Note: Expected CRC 0xEB8B
    frame_rx_control_chgmos_on = bytes([0x7E, 0xA1, 0x61, 0x06, 0x00, 0x02, 0x01, 0x00, 0x8B, 0xEB, 0xAA, 0x55])
    data_rx_control_chgmos_on = bytes([0xA1, 0x61, 0x06, 0x00, 0x02, 0x01, 0x00])
    expected_crc_rx_control_chgmos_on = 0xEB8B  
    test_cases.append(TestCase("RX Control_ChgMOS_ON", frame_rx_control_chgmos_on, data_rx_control_chgmos_on, expected_crc_rx_control_chgmos_on))
    
    # Test 7: TX from Control_ChargeMOS_OFF
    # Original: 7E A1 51 04 00 00 C8 E4 AA 55 (little-endian CRC)
    # Note: Expected CRC 0xE4C8
    frame_tx_control_chgmos_off = bytes([0x7E, 0xA1, 0x51, 0x04, 0x00, 0x00, 0xC8, 0xE4, 0xAA, 0x55])
    data_tx_control_chgmos_off = bytes([0xA1, 0x51, 0x04, 0x00, 0x00])
    expected_crc_tx_control_chgmos_off = 0xE4C8 
    test_cases.append(TestCase("TX Control_ChgMOS_OFF", frame_tx_control_chgmos_off, data_tx_control_chgmos_off, expected_crc_tx_control_chgmos_off))
    
    # Test 7.1: RX from Control_ChargeMOS_OFF
    # Original: 7E A1 61 04 00 02 01 00 F2 2B AA 55 (little-endian CRC)
    # Note: Expected 0x2BF2
    frame_rx_control_chgmos_off = bytes([0x7E, 0xA1, 0x61, 0x04, 0x00, 0x02, 0x01, 0x00, 0xF2, 0x2B, 0xAA, 0x55])
    data_rx_control_chgmos_off = bytes([0xA1, 0x61, 0x04, 0x00, 0x02, 0x01, 0x00])
    expected_crc_rx_control_chgmos_off = 0x2BF2  
    test_cases.append(TestCase("RX Control_ChgMOS_OFF", frame_rx_control_chgmos_off, data_rx_control_chgmos_off, expected_crc_rx_control_chgmos_off))

    # Test 8: TX from Control_DisMOS_ON
    # Original: 7E A1 51 03 00 00 79 25 AA 55 (little-endian CRC)
    # Note: Expected CRC 0x2579
    frame_tx_control_dismos_on = bytes([0x7E, 0xA1, 0x51, 0x03, 0x00, 0x00, 0x79, 0x25, 0xAA, 0x55])
    data_tx_control_dismos_on = bytes([0xA1, 0x51, 0x03, 0x00, 0x00])
    expected_crc_tx_control_dismos_on = 0x2579 
    test_cases.append(TestCase("TX Control_DisMOS_ON", frame_tx_control_dismos_on, data_tx_control_dismos_on, expected_crc_tx_control_dismos_on))
    
    # Test 8.1: RX from Control_DisMOS_ON
    # Original: 7E A1 61 03 00 02 01 00 47 EB AA 55 (little-endian CRC)
    # Note: Expected CRC
    frame_rx_control_dismos_on = bytes([0x7E, 0xA1, 0x61, 0x03, 0x00, 0x02, 0x01, 0x00, 0x47, 0xEB, 0xAA, 0x55])
    data_rx_control_dismos_on = bytes([0xA1, 0x61, 0x03, 0x00, 0x02, 0x01, 0x00])
    expected_crc_rx_control_dismos_on = 0xEB47  
    test_cases.append(TestCase("RX Control_DisMOS_ON", frame_rx_control_dismos_on, data_rx_control_dismos_on, expected_crc_rx_control_dismos_on))

    # Test 9: TX from Control_DisMOS_OFF
    # Original: 7E A1 51 01 00 00 D8 E5 AA 55 (little-endian CRC)
    # Note: Expected CRC 0xE5D8
    frame_tx_control_dismos_off = bytes([0x7E, 0xA1, 0x51, 0x01, 0x00, 0x00, 0xD8, 0xE5, 0xAA, 0x55])
    data_tx_control_dismos_off = bytes([0xA1, 0x51, 0x01, 0x00, 0x00])
    expected_crc_tx_control_dismos_off = 0xE5D8 
    test_cases.append(TestCase("TX Control_DisMOS_OFF", frame_tx_control_dismos_off, data_tx_control_dismos_off, expected_crc_tx_control_dismos_off))
    
    # Test 9.1: RX from Control_DisMOS_OFF
    # Original: 7E A1 61 01 00 02 01 00 3E 2B AA 55 (little-endian CRC)
    # Note: Expected CRC
    frame_rx_control_dismos_off = bytes([0x7E, 0xA1, 0x61, 0x01, 0x00, 0x02, 0x01, 0x00, 0x3E, 0x2B, 0xAA, 0x55])
    data_rx_control_dismos_off = bytes([0xA1, 0x61, 0x01, 0x00, 0x02, 0x01, 0x00])
    expected_crc_rx_control_dismos_off = 0x2B3E 
    test_cases.append(TestCase("RX Control_DisMOS_OFF", frame_rx_control_dismos_off, data_rx_control_dismos_off, expected_crc_rx_control_dismos_off))

    # # Test 10: TX von ParameterConfig_System
    frame_tx_System = bytes([0x7E, 0xA1, 0x02, 0x2A, 0x01, 0x20, 0xB9, 0xE1, 0xAA, 0x55])
    data_tx_System = bytes([0xA1, 0x02, 0x2A, 0x01, 0x20])
    expected_crc_tx_System = 0xE1B9 
    test_cases.append(TestCase("TX System", frame_tx_System, data_tx_System, expected_crc_tx_System))

   
    # Test 10.1: RX von ParameterConfig_System
    frame_rx_System = bytes([0x7E, 0xA1, 0x12, 0x2A, 0x01, 0x20, 0x30, 0x11, 0xB4, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 
                             0xB7, 0x0B, 0xAC, 0x0D, 0x00, 0x00, 0xC0, 0xA8, 0xC0, 0xA8, 0xC0, 0xA8, 0xC0, 0xA8, 0x00, 0x00, 0x00, 0x00, 
                             0xFF, 0xFF, 0x0B, 0x58, 0xFF, 0x0B, 0x00, 0x00, 0x41, 0xF2, 0xAA, 0x55])
    data_rx_System = bytes([0xA1, 0x12, 0x2A, 0x01, 0x20, 0x30, 0x11, 0xB4, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 
                             0xB7, 0x0B, 0xAC, 0x0D, 0x00, 0x00, 0xC0, 0xA8, 0xC0, 0xA8, 0xC0, 0xA8, 0xC0, 0xA8, 0x00, 0x00, 0x00, 0x00, 
                             0xFF, 0xFF])
    expected_crc_rx_System = 0x580B 
    test_cases.append(TestCase("RX System", frame_rx_System, data_rx_System, expected_crc_rx_System))

    # Test 11: TX von ParameterConfig_Pack
    frame_tx_Pack = bytes([0x7E, 0xA1, 0x02, 0x98, 0x00, 0x8E, 0x99, 0xEA, 0xAA, 0x55])
    data_tx_Pack = bytes([0xA1, 0x02, 0x98, 0x00, 0x8E])
    expected_crc_tx_Pack = 0xEA99
    test_cases.append(TestCase("TX Pack", frame_tx_Pack, data_tx_Pack, expected_crc_tx_Pack))

    # Test 11.1: RX von ParameterConfig_Pack
    frame_rx_Pack = bytes([0x7E, 0xA1, 0x12, 0x98, 0x00, 0x8E, 0xF1, 0xFA, 0x0B, 0x00, 0x00, 0x00, 0x60, 0x09, 0xC8, 0x00, 0x80, 0xF0, 
                           0xFA, 0x02, 0x80, 0xF0, 0xFA, 0x02, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x10, 0xD5, 0x0F, 0x6A, 0x0F, 0x05, 0x0F,
                           0xAB, 0x0E, 0x59, 0x0E, 0x28, 0x0E, 0x08, 0x0E, 0xE3, 0x0D, 0x95, 0x0D, 0x4D, 0x0D, 0x01, 0x00, 0x00, 0x00,
                           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 
                           0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x53, 0x59, 0x5A, 0x31, 0x32, 
                           0x33, 0x34, 0x35, 0x00, 0xAE, 0xA5, 0xFF, 0x0B, 0x00, 0x00, 0x41, 0xF2, 0xAA, 0x55])
    
    data_rx_Pack = bytes([0xA1, 0x12, 0x98, 0x00, 0x8E, 0xF1, 0xFA, 0x0B, 0x00, 0x00, 0x00, 0x60, 0x09, 0xC8, 0x00, 0x80, 0xF0, 
                           0xFA, 0x02, 0x80, 0xF0, 0xFA, 0x02, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x10, 0xD5, 0x0F, 0x6A, 0x0F, 0x05, 0x0F,
                           0xAB, 0x0E, 0x59, 0x0E, 0x28, 0x0E, 0x08, 0x0E, 0xE3, 0x0D, 0x95, 0x0D, 0x4D, 0x0D, 0x01, 0x00, 0x00, 0x00,
                           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 
                           0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x53, 0x59, 0x5A, 0x31, 0x32, 
                           0x33, 0x34, 0x35, 0x00])
    expected_crc_rx_Pack = 0xA5AE
    test_cases.append(TestCase("RX Pack", frame_rx_Pack, data_rx_Pack, expected_crc_rx_Pack))


    # Test 12: TX von ParameterConfig_Facotry
    frame_tx_Factory = bytes([0x7E, 0xA1, 0x02, 0x10, 0x02, 0xB4, 0x98, 0xB3, 0xAA, 0x55])
    data_tx_Factory = bytes([0xA1, 0x02, 0x10, 0x02, 0xB4])
    expected_crc_tx_Factory = 0xB398
    test_cases.append(TestCase("TX Factory", frame_tx_Factory, data_tx_Factory, expected_crc_tx_Factory))


    # Test 12: RX von ParameterConfig_Facotry
    frame_rx_Factory = bytes([0x7E, 0xA1, 0x12, 0x10, 0x02, 0xB4, 0x42, 0x54, 0x32, 0x34, 0x42, 0x48, 0x55, 0x42, 0x2D, 0x32, 0x32, 
                              0x30, 0x32, 0x31, 0x35, 0x41, 0x13, 0xFF, 0x7F, 0x36, 0xB1, 0xFF, 0x20, 0xF5, 0xC4, 0x4C, 0xDD, 0x00,
                              0x46, 0x15, 0x56, 0xB1, 0x4D, 0x59, 0x58, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                              0xFF, 0xFF, 0x00, 0x4B, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x4B, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 
                              0x00, 0x18, 0x00, 0x04, 0x00, 0xB7, 0x0B, 0xAC, 0x0D, 0x30, 0x11, 0x02, 0x00, 0x32, 0x34, 0x42, 0x48, 
                              0x41, 0x30, 0x54, 0x42, 0x31, 0x38, 0x30, 0x41, 0x00, 0x00, 0x00, 0x00, 0x32, 0x34, 0x42, 0x48, 0x55, 
                              0x42, 0x30, 0x30, 0x2D, 0x32, 0x32, 0x30, 0x38, 0x32, 0x33, 0x41, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 
                              0x00, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x02, 0x20, 0x03, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x9A, 
                              0xFF, 0x01, 0x00, 0x00, 0x4E, 0x12, 0x09, 0x00, 0x5F, 0x72, 0xAA, 0x55])
    data_rx_Factory = bytes([0xA1, 0x12, 0x10, 0x02, 0xB4, 0x42, 0x54, 0x32, 0x34, 0x42, 0x48, 0x55, 0x42, 0x2D, 0x32, 0x32, 
                              0x30, 0x32, 0x31, 0x35, 0x41, 0x13, 0xFF, 0x7F, 0x36, 0xB1, 0xFF, 0x20, 0xF5, 0xC4, 0x4C, 0xDD, 0x00,
                              0x46, 0x15, 0x56, 0xB1, 0x4D, 0x59, 0x58, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                              0xFF, 0xFF, 0x00, 0x4B, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x4B, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 
                              0x00, 0x18, 0x00, 0x04, 0x00, 0xB7, 0x0B, 0xAC, 0x0D, 0x30, 0x11, 0x02, 0x00, 0x32, 0x34, 0x42, 0x48, 
                              0x41, 0x30, 0x54, 0x42, 0x31, 0x38, 0x30, 0x41, 0x00, 0x00, 0x00, 0x00, 0x32, 0x34, 0x42, 0x48, 0x55, 
                              0x42, 0x30, 0x30, 0x2D, 0x32, 0x32, 0x30, 0x38, 0x32, 0x33, 0x41, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 
                              0x00, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x02, 0x20, 0x03, 0x00, 0x00, 0x00, 0x00])
    expected_crc_rx_Factory = 0x9A7D
    test_cases.append(TestCase("RX Factory", frame_rx_Factory, data_rx_Factory, expected_crc_rx_Factory))

    return test_cases


def main():
    # Define CRC methods to test
    crc_methods = {
        "CRC16-Modbus": crc16_modbus,
        "CRC16-XMODEM": crc16_xmodem,
        "CRC16-CCITT": crc16_ccitt,
        "CRC16-DNP": crc16_dnp,
        "CRC16-Kermit": crc16_kermit,
        "Jake-Checksum": jake_checksum,
    }
    
    # Create test cases with big-endian CRC values
    test_cases = create_test_cases_big_endian()
    
    # Run tests
    results = run_tests(test_cases, crc_methods)
    
    # Display results
    print("ANT-BMS CRC Test Results (Big-Endian Format)")
    print("==============================================")
    print(f"Testing {len(test_cases)} frames with {len(crc_methods)} CRC methods")
    print()
    display_results_table(results)
    
    # Calculate and display success rate for each method
    print("\nSuccess Rate by CRC Method:")
    for method_name, crc_func in crc_methods.items():
        success_count = 0
        for test in test_cases:
            if crc_func(test.data_for_crc) == test.expected_crc:
                success_count += 1
        
        success_rate = (success_count / len(test_cases)) * 100
        print(f"{method_name}: {success_count}/{len(test_cases)} tests passed ({success_rate:.2f}%)")


def byte_swap_16bit(value: int) -> int:
    """Swap the high and low bytes of a 16-bit value"""
    return ((value & 0xFF) << 8) | ((value >> 8) & 0xFF)


if __name__ == "__main__":
    try:
        main()
    except ImportError:
        print("Missing PrettyTable module. Install with: pip install prettytable")
        
        # Fallback to basic display
        print("\nFallback to basic display:")
        crc_methods = {
            "CRC16-Modbus": crc16_modbus,
            "CRC16-XMODEM": crc16_xmodem,
            "CRC16-CCITT": crc16_ccitt,
            "CRC16-DNP": crc16_dnp,
            "CRC16-Kermit": crc16_kermit,
            "Jake-Checksum": jake_checksum,
        }
        
        test_cases = create_test_cases_big_endian()
        
        print(f"{'Test Case':<15} {'Expected':<10}", end="")
        for method in crc_methods:
            print(f"{method:<15}", end="")
        print()
        
        for test in test_cases:
            print(f"{test.name:<15} {test.expected_crc:04X}", end="")
            for _, crc_func in crc_methods.items():
                calculated = crc_func(test.data_for_crc)
                print(f"{calculated:04X}{' ✓' if calculated == test.expected_crc else ' ✗':<15}", end="")
            print()
